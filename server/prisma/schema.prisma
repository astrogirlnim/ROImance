// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Relationship {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  transactions        Transaction[]
  relationshipPrices  RelationshipPrice[]
  orders              Order[]

  @@map("relationships")
}

model Transaction {
  id             String      @id @default(cuid())
  relationshipId String      @map("relationship_id")
  amountEc       Float       @map("amount_ec")
  isCredit       Boolean     @map("is_credit")
  note           String?
  timestamp      DateTime    @default(now())

  // Relations
  relationship   Relationship @relation(fields: [relationshipId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model RelationshipPrice {
  id             String      @id @default(cuid())
  relationshipId String      @map("relationship_id")
  priceEc        Float       @map("price_ec")
  date           DateTime    @default(now())

  // Relations
  relationship   Relationship @relation(fields: [relationshipId], references: [id], onDelete: Cascade)

  @@unique([relationshipId, date])
  @@map("relationship_prices")
}

model Order {
  id             String      @id @default(cuid())
  relationshipId String      @map("relationship_id")
  user           String
  side           OrderSide   // "buy" or "sell"
  shares         Int
  price          Float
  timestamp      DateTime    @default(now())
  status         OrderStatus @default(PENDING)

  // Relations
  relationship   Relationship @relation(fields: [relationshipId], references: [id], onDelete: Cascade)
  trades         Trade[]

  @@map("orders")
}

model Trade {
  id        String   @id @default(cuid())
  buyerId   String   @map("buyer_id")
  sellerId  String   @map("seller_id")
  orderId   String   @map("order_id")
  shares    Int
  price     Float
  timestamp DateTime @default(now())

  // Relations
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("trades")
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  FILLED
  CANCELLED
}
